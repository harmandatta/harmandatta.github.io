<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-13T15:56:16+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Harman Singh Datta</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Jenkinsfile Approval Stage: Usage, Types, and Implementation</title><link href="http://localhost:4000/devops/2025/07/10/jenkinsfile-approval-stages.html" rel="alternate" type="text/html" title="Jenkinsfile Approval Stage: Usage, Types, and Implementation" /><published>2025-07-10T00:00:00+05:30</published><updated>2025-07-10T00:00:00+05:30</updated><id>http://localhost:4000/devops/2025/07/10/jenkinsfile-approval-stages</id><content type="html" xml:base="http://localhost:4000/devops/2025/07/10/jenkinsfile-approval-stages.html"><![CDATA[<h2 id="jenkinsfile-approval-stage">Jenkinsfile Approval Stage</h2>
<p>In modern CI/CD pipelines, not every step should be automated—particularly when it comes to production deployments or critical actions. For such cases, Jenkins provides a way to pause pipeline execution and wait for manual approval using the <code class="language-plaintext highlighter-rouge">input</code> directive.</p>

<p>This feature adds a layer of human validation, making it suitable for quality gates, business approvals, or release management.</p>

<h2 id="usage">Usage</h2>
<p>The approval stage is used when:</p>
<ul>
  <li>A team lead or QA needs to approve deployment</li>
  <li>Risk mitigation is required before production actions</li>
  <li>Decisions based on environment, business readiness, or external factors need to be made</li>
</ul>

<p>Jenkins uses the <code class="language-plaintext highlighter-rouge">input</code> step inside a stage to halt pipeline execution and prompt for manual intervention.</p>

<h2 id="implementation">Implementation</h2>
<h3 id="basic-yesno-approval-example">Basic Yes/No Approval Example</h3>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pipeline</span> <span class="o">{</span>
    <span class="n">agent</span> <span class="n">any</span>

    <span class="n">stages</span> <span class="o">{</span>
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Build'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">echo</span> <span class="s1">'Building...'</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">stage</span><span class="o">(</span><span class="s1">'Approval'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">input</span> <span class="nl">message:</span> <span class="s1">'Do you want to proceed to deployment?'</span><span class="o">,</span> <span class="nl">ok:</span> <span class="s1">'Yes'</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">stage</span><span class="o">(</span><span class="s1">'Deploy'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">echo</span> <span class="s1">'Deploying application...'</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="types-of-approval-inputs">Types of Approval Inputs</h2>
<p>Jenkins supports multiple types of manual approvals using the <code class="language-plaintext highlighter-rouge">input</code> step:</p>

<h3 id="1-simple-yesno-approval">1. Simple Yes/No Approval</h3>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">input</span> <span class="nl">message:</span> <span class="s1">'Deploy to Production?'</span><span class="o">,</span> <span class="nl">ok:</span> <span class="s1">'Yes'</span>
</code></pre></div></div>

<h3 id="2-choice-based-approval">2. Choice-Based Approval</h3>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">input</span> <span class="nl">message:</span> <span class="s1">'Select environment for deployment:'</span><span class="o">,</span>
      <span class="nl">parameters:</span> <span class="o">[</span>
          <span class="n">choice</span><span class="o">(</span><span class="nl">name:</span> <span class="s1">'Environment'</span><span class="o">,</span> <span class="nl">choices:</span> <span class="o">[</span><span class="s1">'staging'</span><span class="o">,</span> <span class="s1">'production'</span><span class="o">],</span> <span class="nl">description:</span> <span class="s1">'Choose environment'</span><span class="o">)</span>
      <span class="o">]</span>
</code></pre></div></div>

<h3 id="3-text-input">3. Text Input</h3>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">input</span> <span class="nl">message:</span> <span class="s1">'Enter deployment version:'</span><span class="o">,</span>
      <span class="nl">parameters:</span> <span class="o">[</span>
          <span class="n">string</span><span class="o">(</span><span class="nl">name:</span> <span class="s1">'VERSION'</span><span class="o">,</span> <span class="nl">defaultValue:</span> <span class="s1">'v1.0.0'</span><span class="o">,</span> <span class="nl">description:</span> <span class="s1">'Version to deploy'</span><span class="o">)</span>
      <span class="o">]</span>
</code></pre></div></div>

<h3 id="4-input-with-timeout">4. Input with Timeout</h3>
<p>You can use a <code class="language-plaintext highlighter-rouge">timeout</code> block to automatically fail or proceed if no input is provided within a defined time.</p>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stage</span><span class="o">(</span><span class="s1">'Approval'</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">steps</span> <span class="o">{</span>
        <span class="n">timeout</span><span class="o">(</span><span class="nl">time:</span> <span class="mi">10</span><span class="o">,</span> <span class="nl">unit:</span> <span class="s1">'MINUTES'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">input</span> <span class="nl">message:</span> <span class="s1">'Approve deployment?'</span><span class="o">,</span> <span class="nl">ok:</span> <span class="s1">'Proceed'</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This will wait for 10 minutes. If no action is taken, the pipeline will abort.</p>

<h2 id="image-jenkins-pipeline-with-approval-stage">Image: Jenkins Pipeline with Approval Stage</h2>
<p>Below is a conceptual diagram of a Jenkins pipeline with an approval stage:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Checkout] ---&gt; [Build] ---&gt; [Approval (Manual Input)] ---&gt; [Deploy]
</code></pre></div></div>

<p><img src="/assets/img/posts/jenkinsfile-approval/approval-stage.webp" alt="Approval Stage Image" /></p>

<p>If the approval is granted, the pipeline proceeds. If rejected or timed out, the pipeline fails or halts depending on configuration.</p>

<h2 id="benefits">Benefits</h2>
<ul>
  <li>Human validation for critical stages</li>
  <li>Prevents unintended changes from being deployed</li>
  <li>Enables custom branching and logic</li>
  <li>Provides audit trails for approvals</li>
</ul>

<h2 id="considerations">Considerations</h2>
<ul>
  <li>Ensure users have proper permissions to approve</li>
  <li>Combine with <code class="language-plaintext highlighter-rouge">timeout</code> for better control</li>
  <li>Document who approves what and why for audit readiness</li>
</ul>

<h2 id="conclusion">Conclusion</h2>
<p>Jenkins approval stages are essential for controlled and secure deployments. They give teams a chance to verify and intervene before high-risk actions. With support for yes/no inputs, options, and text parameters, Jenkins pipelines can flexibly integrate manual steps where necessary.</p>

<p><em>Happy Pipelin-ing!</em></p>]]></content><author><name></name></author><category term="devops" /><category term="devops" /><category term="jenkins" /><summary type="html"><![CDATA[Understand how to implement an approval stage in Jenkins pipelines. This post explores its usage, benefits, and types including manual input, choice, and yes/no approvals.]]></summary></entry><entry><title type="html">Securing Jenkins: Users, Credentials, and Role-based Access</title><link href="http://localhost:4000/devops/2025/07/09/jenkins-security-rbac.html" rel="alternate" type="text/html" title="Securing Jenkins: Users, Credentials, and Role-based Access" /><published>2025-07-09T00:00:00+05:30</published><updated>2025-07-09T00:00:00+05:30</updated><id>http://localhost:4000/devops/2025/07/09/jenkins-security-rbac</id><content type="html" xml:base="http://localhost:4000/devops/2025/07/09/jenkins-security-rbac.html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Security is a critical component of any CI/CD system, and Jenkins is no exception. Out-of-the-box, Jenkins is powerful but requires configuration to ensure it’s secured against unauthorized access, data leaks, and malicious actions.</p>

<p>This guide focuses on three essential aspects of Jenkins security:</p>
<ol>
  <li>Managing Users</li>
  <li>Securing Credentials</li>
  <li>Implementing Role-Based Access Control (RBAC)</li>
</ol>

<h2 id="1-user-management">1. User Management</h2>
<h3 id="usage">Usage</h3>
<p>Jenkins allows you to define users and manage authentication using built-in or external systems like LDAP, GitHub OAuth, or Active Directory.</p>

<h3 id="implementation">Implementation</h3>
<p>To enable user security:</p>
<ol>
  <li>Navigate to <strong>Manage Jenkins &gt; Configure Global Security</strong>.</li>
  <li>Check <strong>Enable Security</strong>.</li>
  <li>Choose an appropriate security realm:
    <ul>
      <li>Jenkins’ own user database</li>
      <li>LDAP</li>
      <li>GitHub OAuth</li>
      <li>SSO plugins</li>
    </ul>
  </li>
  <li>Create users via <strong>Manage Jenkins &gt; Manage Users</strong>.</li>
</ol>

<h3 id="best-practices">Best Practices</h3>
<ul>
  <li>Disable anonymous access.</li>
  <li>Enforce strong passwords.</li>
  <li>Enable audit logging to track user actions.</li>
</ul>

<h2 id="2-securing-credentials">2. Securing Credentials</h2>
<h3 id="usage-1">Usage</h3>
<p>Jenkins uses a credential store to manage secrets like API tokens, SSH keys, and passwords. These are stored in an encrypted format on the Jenkins master.</p>

<h3 id="implementation-1">Implementation</h3>
<ol>
  <li>Go to <strong>Manage Jenkins &gt; Credentials</strong>.</li>
  <li>Store credentials under appropriate scopes:
    <ul>
      <li>Global</li>
      <li>System</li>
      <li>Folder</li>
      <li>Project (via Pipeline)</li>
    </ul>
  </li>
  <li>Use credentials safely in Jenkinsfile:</li>
</ol>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pipeline</span> <span class="o">{</span>
    <span class="n">agent</span> <span class="n">any</span>
    <span class="n">stages</span> <span class="o">{</span>
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Use Secret'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">withCredentials</span><span class="o">([</span><span class="n">string</span><span class="o">(</span><span class="nl">credentialsId:</span> <span class="s1">'my-secret-token'</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">'TOKEN'</span><span class="o">)])</span> <span class="o">{</span>
                    <span class="n">sh</span> <span class="s1">'curl -H "Authorization: Bearer $TOKEN" https://example.com/api'</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="best-practices-1">Best Practices</h3>
<ul>
  <li>Do not hard-code secrets in your Jenkinsfiles.</li>
  <li>Use folder-level credentials to limit scope.</li>
  <li>Rotate secrets regularly.</li>
</ul>

<h2 id="3-role-based-access-control-rbac">3. Role-Based Access Control (RBAC)</h2>
<h3 id="usage-2">Usage</h3>
<p>RBAC allows you to define granular permissions for different users or groups based on their roles in the organization.</p>

<h3 id="implementation-2">Implementation</h3>
<ol>
  <li>Install <strong>Role-based Authorization Strategy</strong> plugin.</li>
  <li>Go to <strong>Manage Jenkins &gt; Manage and Assign Roles</strong>.</li>
  <li>Define roles under <strong>Manage Roles</strong>:
    <ul>
      <li>Define permissions for roles like <code class="language-plaintext highlighter-rouge">developer</code>, <code class="language-plaintext highlighter-rouge">admin</code>, <code class="language-plaintext highlighter-rouge">viewer</code>.</li>
    </ul>
  </li>
  <li>Assign users or groups to roles via <strong>Assign Roles</strong>.</li>
</ol>

<h3 id="example-roles">Example Roles</h3>

<table>
  <thead>
    <tr>
      <th>Role</th>
      <th>Permissions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Admin</td>
      <td>All permissions</td>
    </tr>
    <tr>
      <td>Developer</td>
      <td>Read, Build, Configure on specific jobs</td>
    </tr>
    <tr>
      <td>Viewer</td>
      <td>Read-only access</td>
    </tr>
  </tbody>
</table>

<h3 id="best-practices-2">Best Practices</h3>
<ul>
  <li>Follow the principle of least privilege.</li>
  <li>Avoid giving <code class="language-plaintext highlighter-rouge">Overall/Administer</code> to non-admin users.</li>
  <li>Use folders to apply roles hierarchically.</li>
</ul>

<h2 id="benefits-of-jenkins-security-configuration">Benefits of Jenkins Security Configuration</h2>
<ul>
  <li>Prevent unauthorized access to jobs and credentials.</li>
  <li>Isolate user roles to prevent accidental changes.</li>
  <li>Protect secrets and sensitive integrations.</li>
  <li>Meet compliance and audit requirements.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>
<p>Securing Jenkins is essential for any team relying on it for CI/CD. With proper user management, secret storage, and access control, you can build a safe, maintainable pipeline environment that scales with your organization’s needs.</p>

<p>Start with disabling anonymous access, then implement credentials storage and RBAC to ensure your Jenkins setup is secure by design.</p>

<p><em>Happy Secure Pipelin-ing!</em></p>]]></content><author><name></name></author><category term="devops" /><category term="devops" /><category term="jenkins" /><category term="security" /><summary type="html"><![CDATA[Learn how to secure Jenkins by managing users, storing credentials securely, and applying role-based access control (RBAC) to protect your CI/CD pipelines.]]></summary></entry><entry><title type="html">Jenkinsfile Usage and Implementation</title><link href="http://localhost:4000/devops/2025/07/09/jenkinsfile-usage.html" rel="alternate" type="text/html" title="Jenkinsfile Usage and Implementation" /><published>2025-07-09T00:00:00+05:30</published><updated>2025-07-09T00:00:00+05:30</updated><id>http://localhost:4000/devops/2025/07/09/jenkinsfile-usage</id><content type="html" xml:base="http://localhost:4000/devops/2025/07/09/jenkinsfile-usage.html"><![CDATA[<p>Jenkins is a cornerstone tool in the DevOps ecosystem, allowing teams to automate builds, tests, and deployments using pipelines. At the core of this automation is the <strong>Jenkinsfile</strong>, a simple yet powerful way to define your CI/CD workflows as code.</p>

<p>In this post, you’ll learn:</p>
<ol>
  <li>What a Jenkinsfile is and how to write one.</li>
  <li>How to implement a Jenkins pipeline with real-world stages</li>
  <li>How to integrate Jenkins with GitHub using webhooks for trigger-based automation</li>
</ol>

<h2 id="what-is-a-jenkinsfile">What is a Jenkinsfile?</h2>
<p>A <strong>Jenkinsfile</strong> is a configuration file that lives in your repository and defines how your pipeline behaves. It ensures consistent, repeatable, and trackable build steps.</p>

<h2 id="basic-jenkinsfile-structure">Basic Jenkinsfile Structure</h2>
<p>Here’s a sample Declarative Jenkinsfile:</p>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pipeline</span> <span class="o">{</span>
    <span class="n">agent</span> <span class="n">any</span>

    <span class="n">environment</span> <span class="o">{</span>
        <span class="n">PROJECT_NAME</span> <span class="o">=</span> <span class="s1">'my-app'</span>
        <span class="n">DEPLOY_ENV</span> <span class="o">=</span> <span class="s1">'staging'</span>
    <span class="o">}</span>

    <span class="n">stages</span> <span class="o">{</span>
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Checkout'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">git</span> <span class="s1">'https://github.com/your-repo/project.git'</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">stage</span><span class="o">(</span><span class="s1">'Build'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">sh</span> <span class="s1">'./build.sh'</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">stage</span><span class="o">(</span><span class="s1">'Test'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">sh</span> <span class="s1">'./run_tests.sh'</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">stage</span><span class="o">(</span><span class="s1">'Deploy'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">sh</span> <span class="s1">'./deploy.sh ${DEPLOY_ENV}'</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">post</span> <span class="o">{</span>
        <span class="n">success</span> <span class="o">{</span>
            <span class="n">echo</span> <span class="s1">'Pipeline executed successfully.'</span>
        <span class="o">}</span>
        <span class="n">failure</span> <span class="o">{</span>
            <span class="n">echo</span> <span class="s1">'Pipeline failed.'</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="github-integration-with-jenkins-using-webhooks">GitHub Integration with Jenkins Using Webhooks</h2>
<p>Integrating Jenkins with GitHub ensures your CI/CD pipeline runs automatically when code is pushed. Here’s how to set it up:</p>

<h3 id="1-install-required-plugins">1. Install Required Plugins</h3>
<p>In Jenkins, install the following:</p>
<ul>
  <li>GitHub Integration Plugin</li>
  <li>GitHub Branch Source Plugin</li>
  <li>Pipeline Plugin</li>
</ul>

<h3 id="2-create-jenkins-credentials-for-github">2. Create Jenkins Credentials for GitHub</h3>
<ol>
  <li>Go to <strong>Jenkins → Manage Jenkins → Credentials</strong>.</li>
  <li>Add credentials for GitHub (personal access token or SSH key).</li>
  <li>Note the <code class="language-plaintext highlighter-rouge">credentialsId</code> for use in pipelines.</li>
</ol>

<h3 id="3-configure-the-github-project-in-jenkins">3. Configure the GitHub Project in Jenkins</h3>
<ul>
  <li>Create a new job (<strong>Multibranch Pipeline</strong> or <strong>Pipeline</strong>).</li>
  <li>In <strong>Pipeline Script from SCM</strong>, choose:
    <ul>
      <li>SCM: Git</li>
      <li>Repo URL: https://github.com/your-user/your-repo.git</li>
      <li>Credentials: Select the one you added</li>
    </ul>
  </li>
</ul>

<p>Ensure your Jenkinsfile is in the root of your repo.</p>

<h3 id="4-set-up-the-webhook-in-github">4. Set Up the Webhook in GitHub</h3>
<ol>
  <li>Go to your GitHub repo → <strong>Settings → Webhooks → Add Webhook</strong>.</li>
  <li>Set the following:
    <ul>
      <li><strong>Payload URL</strong>: http://your-jenkins-server/github-webhook/</li>
      <li><strong>Content Type</strong>: application/json</li>
      <li><strong>Secret</strong>: <em>(Optional but recommended)</em></li>
      <li><strong>Trigger</strong>: Select “Just the push event” or include pull requests.</li>
    </ul>
  </li>
  <li>Click <strong>Add Webhook</strong>.</li>
</ol>

<h3 id="test-it">Test It</h3>
<p>Push a change to the repository (e.g., modify a file), and Jenkins should automatically trigger a build.</p>

<h2 id="tips-and-best-practices">Tips and Best Practices</h2>
<ul>
  <li>Use declarative pipelines for better structure and error handling.</li>
  <li>Use <strong>multibranch pipelines</strong> to automatically detect and build branches or PRs.</li>
  <li>Secure your Jenkins instance and <strong>lock down webhook endpoints</strong>.</li>
  <li>Use <strong>parameterized pipelines</strong> to support deployments to multiple environments.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Jenkinsfiles bring CI/CD automation into your repository with a clear, version-controlled syntax. When combined with GitHub webhooks, you get a seamless and automatic build system triggered by code changes.</p>

<p><em>Happy Pipelin-ing!</em></p>]]></content><author><name></name></author><category term="devops" /><category term="devops" /><category term="jenkins" /><category term="ci-cd" /><category term="github" /><summary type="html"><![CDATA[Learn how to use Jenkinsfiles for CI/CD automation with practical examples and integrate Jenkins with GitHub using webhooks.]]></summary></entry></feed>